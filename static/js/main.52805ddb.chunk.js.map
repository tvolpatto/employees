{"version":3,"sources":["components/Filter.js","components/TableItem.js","components/Table.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","className","type","placeholder","aria-label","aria-describedby","onChange","handleInputChange","TableItem","scope","id","name","email","department","showIcon","field","order","class","Table","onClick","handleSort","employees","map","emp","compareValues","key","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","Wrapper","state","empToRender","handleSortClick","event","target","innerText","toLowerCase","sortedList","sort","setState","value","filteredList","filter","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52805ddb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Filter(props) {\r\n    return (\r\n        <div className=\"input-group mb-3\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Type a name, email or department to filter\"\r\n                aria-label=\"Filter option\" aria-describedby=\"basic-addon2\" \r\n                onChange={props.handleInputChange} />          \r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function TableItem(props) {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{props.id}</th>\r\n            <td>{props.name}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.department}</td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TableItem from './TableItem'\r\n\r\nfunction showIcon(props, field){\r\n    if (props.field=== field) {\r\n        return props.order ==='asc'? <i class=\"fas fa-sort-up\"></i> : <i class=\"fas fa-sort-down\"/>;\r\n    }\r\n} \r\n\r\nexport default function Table(props) {  \r\n    return (\r\n        <div>\r\n          <div>\r\n             <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\" onClick={props.handleSort}>\r\n                                Id                                \r\n                                {showIcon(props, \"id\")}\r\n                            </th>\r\n                            <th scope=\"col\" onClick={props.handleSort}>\r\n                                Name\r\n                                {showIcon(props, \"name\")}\r\n                            </th>\r\n                            <th scope=\"col\" onClick={props.handleSort}>\r\n                                Email\r\n                                {showIcon(props, \"email\")}\r\n                            </th>\r\n                            <th scope=\"col\" onClick={props.handleSort}>\r\n                                Department\r\n                                {showIcon(props, \"department\")}\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.employees.map(emp =>\r\n                           <TableItem \r\n                                id={emp.id}\r\n                                name={emp.name}\r\n                                email={emp.email}\r\n                                department={emp.department}\r\n                            />\r\n                        )}\r\n                    </tbody>\r\n                </table> \r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport employees from \"../utils/db.json\"\r\nimport Filter from './Filter'\r\nimport Table from './Table'\r\n\r\nfunction compareValues(key, order = 'asc') {\r\n    return function innerSort(a, b) {\r\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n        return 0;\r\n      }\r\n  \r\n      const varA = (typeof a[key] === 'string')\r\n        ? a[key].toUpperCase() : a[key];\r\n      const varB = (typeof b[key] === 'string')\r\n        ? b[key].toUpperCase() : b[key];\r\n  \r\n      let comparison = 0;\r\n      if (varA > varB) {\r\n        comparison = 1;\r\n      } else if (varA < varB) {\r\n        comparison = -1;\r\n      }\r\n      return (\r\n        (order === 'desc') ? (comparison * -1) : comparison\r\n      );\r\n    };\r\n}\r\n\r\nexport default class Wrapper extends Component {\r\n    state = {\r\n        empToRender : employees,\r\n        order : 'asc',\r\n        field : \"id\" \r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState(this.state);\r\n    }\r\n\r\n    handleSortClick = event => {\r\n        const field = event.target.innerText.toLowerCase();\r\n        const  order =  this.state.order ==='asc' ? 'desc' : 'asc';\r\n        const sortedList = this.state.empToRender.sort(compareValues(field, order));\r\n        this.setState({\r\n            empToRender : sortedList,\r\n            order : order,\r\n            field : field\r\n        });\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const value = event.target.value.toLowerCase();\r\n        const filteredList = employees.filter(emp => {\r\n            if (emp.name.toLowerCase().includes(value) \r\n                || emp.department.toLowerCase().includes(value)\r\n                || emp.email.toLowerCase().includes(value)) {\r\n                return emp;\r\n            }\r\n        });\r\n       this.setState({empToRender : filteredList})\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-4 mx-auto\">\r\n                <h1 className=\"pt-2 pb-2 text-center\">Employee directory</h1>\r\n                <Filter handleInputChange={this.handleInputChange}/>\r\n                <Table \r\n                    employees={this.state.empToRender} \r\n                    handleSort={this.handleSortClick}\r\n                    order={this.state.order}\r\n                    field={this.state.field}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\n\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n  return (\n    <div>\n      <Wrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}